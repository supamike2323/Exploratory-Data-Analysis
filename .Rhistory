all_totals <- left_join(totals_by_day, national)
# 4.e How many differences do you find between `national_total_cases` and
#     `state_total_cases`?
#     `national_state_diff`  (as a numeric value - use pull() function )
national_state_diff <- all_totals %>% filter(national_total_cases != state_total_cases) %>% summarize(national_state_difference = n())%>%
pull(national_state_difference)
# 4.e How many differences do you find between `national_total_cases` and
#     `state_total_cases`?
#     `national_state_diff`  (as a numeric value - use pull() function )
national_state_diff <- all_totals %>% filter(national_total_cases != state_total_cases) %>% summarize(national_state_difference = n())%>%
pull(national_state_difference)
national_state_diff
num_state_diff <- filter(all_totals, state_total != cases)
source("~/Desktop/Class/Info 201/a2-covid-trends-supamike2323/analysis.R")
num_state_diff <- filter(all_totals, state_total != cases)
View(num_state_diff)
num_state_diff
nrow(num_state_diff)
num_state_diff <- nrow(num_state_diff)
nuum_state_diff
num_state_diff
num_state_diff <- filter(all_totals, state_total != cases)
num_state_diff <- nrow(num_state_diff)
num_state_diff
num_county_diff <- filter(all_totals, county_total != cases)
num_county_diff <- nrow(num_county_diff)
num_county_diff
num_county_diff <- filter(all_totals, county_total != new_cases)
num_county_diff <- nrow(num_county_diff)
num_county_diff
num_county_diff <- filter(all_totals, county_total != new_cases)
View(num_county_diff)
View(totals_by_day)
View(county_by_day)
View(counties)
View(states)
View(counties)
tail(counties, n =1)
num_county_diff <- filter(all_totals, county_total != new_cases)
num_county_diff <- nrow(num_county_diff)
num_county_diff
num_county_diff <- filter(all_totals, county_total != cases)
num_county_diff <- nrow(num_county_diff)
num_county_diff
# national_total_cases: The case counts in the `national` data frame
# state_total_cases:    The sum of all case counts in the `states` data frame
# county_total_cases:   The sum of all case counts in the `counties` data frame
#
# We now guide you through the steps for this consistency check. We've typed the
# variable names to save you a little bit of work.
#
# 4.a Create a `county_by_day` data frame with columns:
#     `date` and `county_total_cases`. HINT: To summarize
#      the case counts, how do you need to group the data?
county_by_day <- counties %>%
group_by(date) %>%
summarize(county_total_cases = sum(cases))
View(county_by_day)
# 4.b Create a `state_by_day` data frame with columns:
#     `date` and `state_total_cases`.  HINT: See previous
#      hint.
state_by_day <- states %>% group_by(date) %>% summarize(state_total_cases = sum(cases))
# 4.c Join the `county_by_day` and `state_by_day` data frames. Call
#     this data frame `totals_by_day`.
totals_by_day <- left_join(county_by_day, state_by_day)
# 4.d Join `totals_by_day` with the `nation` data frame and, for
#     clarity, rename the `cases` column to `national_total_cases`. Call
#     this data frame `all_totals`.
national <- rename(national, national_total_cases = cases)
all_totals <- left_join(totals_by_day, national)
# 4.e How many differences do you find between `national_total_cases` and
#     `state_total_cases`?
#     `national_state_diff`  (as a numeric value - use pull() function )
national_state_diff <- all_totals %>% filter(national_total_cases != state_total_cases) %>% summarize(national_state_difference = n())%>%
pull(national_state_difference)
national_state_diff
# 4.f How many differences do you find between `state_total_cases` and
#     `county_total_cases'?
#     `state_county_diff` (as a numeric value - use the pull() function)
state_county_diff <- all_totals %>% filter(state_total_cases != county_total_cases) %>% summarize(county_state_difference = n()) %>% pull(county_state_difference)
state_county_diff
source("~/Desktop/Class/Info 201/a2-covid-trends-supamike2323/analysis.R")
# Oh no! An inconsistency -- let's dig further into this. Let's see if we can
# find out *where* this inconsistency lies. Let's take the county level data,
# and add up all of the cases to the state level on each day (e.g.,
# aggregating to the state level). Store this dataframe with three columns
# (state, date, county_totals) in the variable `sum_county_to_state`.
# (To avoid DPLYR automatically grouping your results,
# specify `.groups = "drop"` in your `summarize()` statement. This is a bit of
# an odd behavior....)
sum_county_to_state <- counties %>%
filter(date) %>%
filter(state) %>%
fitler(county_totals)
# Oh no! An inconsistency -- let's dig further into this. Let's see if we can
# find out *where* this inconsistency lies. Let's take the county level data,
# and add up all of the cases to the state level on each day (e.g.,
# aggregating to the state level). Store this dataframe with three columns
# (state, date, county_totals) in the variable `sum_county_to_state`.
# (To avoid DPLYR automatically grouping your results,
# specify `.groups = "drop"` in your `summarize()` statement. This is a bit of
# an odd behavior....)
sum_county_to_state <- counties %>%
filter(date) %>%
filter(state) %>%
filter(county_totals)
View(all_totals)
View(sum_country_to_state)
View(state_by_day)
sum_county_to_state <- merge(x = county_by_day, y = state_by_day, by = 'date')
View(sum_county_to_state)
joined_states <- join(x = sum_county_to_state, y = states, by = 'date')
joined_states <- merge(x = sum_county_to_state, y = states, by = 'date', all.x = TRUE)
joined_states
View(joined_states)
joined_states <- merge(x = sum_county_to_state, y = states, by = 'date')
View(joined_states)
View(states)
View(county_by_day)
View(counties)
county_by_day <- group_by(counties, date)
View(county_by_day)
county_by_day <- summarise(county_by_day, county_total = sum(cases))
county_by_day1 <- group_by(counties, date)
View(county_by_day1)
View(sum_county_to_state)
View(sum_county_to_state, county_total != state_total)
View(filter(sum_county_to_state, county_total != state_total))
y
sum_county_to_state <- merge(x = county_by_day, y = state_by_day, by = 'date')
has_discrepancy <- filter(sum_county_to_state, county_total != state_total)
has_discrepancy
county_by_day <- group_by(counties, date)
colnames(county_by_day)
county_by_day <- summarise(county_by_day, county_total = location)
county_by_day <- summarise(county_by_day, county_total = location, .groups = "drop")
county_by_day <- summarise(county_by_day, location, .groups = "drop")
county_by_day1 <- group_by(counties, location)
View(county_by_day1)
county_by_day1 <- group_by(counties, county)
View(county_by_day1)
county_by_day1 <- group_by(counties, state)
View(county_by_day1)
county_by_day1 <- summarise(county_by_day, state, .groups = "drop")
cases_in_county <- max(counites$cases)
cases_in_county <- max(counties$cases)
state_in_county <- max(state$cases)
state_in_county <- max(states$cases)
national_in_county <- max(national$cases)
national_in_county
View(counties)
cases_in_county <- max(counties$cases)
cases_in_county
source("~/Desktop/Class/Info 201/a2-covid-trends-supamike2323/analysis.R")
state_in_county <- max(states$cases)
state_in_county
source("~/Desktop/Class/Info 201/a2-covid-trends-supamike2323/analysis.R")
sum_county_to_state <- group_by(counties, state)
View(sum_county_to_state)
sum_county_to_state <- group_by(counties, state, date)
View(sum_county_to_state)
sum_county_to_state <- counties %>%
group_by(state, date)  %>%
summarise(county_totals = sum(cases), .groups = 'drop')
View(sum_county_to_state)
sum_county_to_state <- counties %>%
group_by(date, states)  %>%
summarise(county_totals = sum(cases), .groups = 'drop')
sum_county_to_state <- counties %>%
group_by(states, date)  %>%
summarise(county_totals = sum(cases), .groups = 'drop')
sum_county_to_state <- counties %>%
group_by(state, date)  %>%
summarise(county_totals = sum(cases), .groups = 'drop')
View(sum_county_to_state)
has_discrepancy <- filter(sum_county_to_state, county_total != state_total)
joined_states <- merge(x = sum_county_to_state, y = states, by = 'date')
View(joined_states)
joined_states <- left_join(states, sum_county_to_state, by = c("date", "state"), all.x = TRUE)
View(joined_states)
joined_states <- left_join(states, sum_county_to_state, by = c("state", "date"), all.x = TRUE)
joined_states <- left_join(states, sum_county_to_state, by = c("date", "state"), all.x = TRUE)
View(joined_states)
joined_states <- left_join(states, sum_county_to_state, by = c("state", "date"), all.x = TRUE)
has_discrepancy <- filter(joined_states, county_total != cases)
has_discrepancy <- filter(joined_states, county_total != cases)
sum_county_to_state <- counties %>%
group_by(state, date)  %>%
summarise(county_totals = sum(cases), .groups = 'drop')
joined_states <- left_join(states, sum_county_to_state, by = c("state", "date"), all.x = TRUE)
has_discrepancy <- filter(joined_states, county_total != cases)
has_discrepancy <- filter(joined_states, county_totals != cases)
View(has_discrepancy)
state_highest_difference <- group_by(has_discrepancy, state)
state_highest_difference <- summarise(state_highest_difference, difference = abs(sum(county_totals - cases)))
state_highest_difference <- filter(difference == max(difference))
state_highest_difference <- filter(difference == max(difference))
joined_states <- left_join(states, sum_county_to_state, by = c("state", "date"), all.x = TRUE)
has_discrepancy <- filter(joined_states, county_totals != cases)
state_highest_difference <- group_by(has_discrepancy, state)
state_highest_difference <- summarise(state_highest_difference, difference = abs(sum(county_totals - cases)))
state_highest_difference <- filter(difference == max(difference))
View(state_highest_difference)
state_highest_difference <- filter(state_highest_difference, difference == max(difference))
state_highest_difference <- state_highest_difference[,1]
state_highest_difference
national$new_deaths <- national$deaths - lag(national$deaths, 1)
View(national)
source("~/Desktop/Class/Info 201/a2-covid-trends-supamike2323/analysis.R")
source("~/Desktop/Class/Info 201/a2-covid-trends-supamike2323/analysis.R")
source("~/Desktop/Class/Info 201/a2-covid-trends-supamike2323/analysis.R")
source("~/.active-rstudio-document")
runApp('Desktop/Class/Info 201/SHINY II 5:16')
runApp('Desktop/Class/Info 201/SHINY II 5:16')
runApp('Desktop/Class/Info 201/Lect 14 -- Shiny App Activity')
runApp()
runApp()
runApp('Desktop/Class/Info 201/Lect 14 -- Shiny App Activity')
runApp('Desktop/Class/Info 201/Lect 14 -- Shiny App Activity')
runApp('Desktop/Class/Info 201/SHINY II 5:16')
runApp('Desktop/Class/Info 201/SHINY II 5:16')
s
source('positions.r')
setwd("~/Exploratory-Data-Analysis")
source('positions.r')
source('positions.r')
source("~/Exploratory-Data-Analysis/positions.r")
#create the boxplots of points per game in each positions
#C=center, F=forward, F-C=forward&center, G=guard, PF= power forward, PG=point guard, SF= small forward
#SF-PF=small foward&power forward, SG= shooting guard
ggplot(data = scores_df, aes(x=Pos,y=PTS, fill=Pos)) +
geom_boxplot()+
scale_fill_brewer(palette="Dark2") +
geom_jitter(shape=16, position=position_jitter(0.2))+
labs(title = 'Point per game for all players in different positions',
y='Points per game',x='Positions')
#create the boxplots of points per game in each positions
#C=center, F=forward, F-C=forward&center, G=guard, PF= power forward, PG=point guard, SF= small forward
#SF-PF=small foward&power forward, SG= shooting guard
ggplot(data = scores_df, aes(x=Pos,y=PTS, fill=Pos)) +
geom_boxplot()+
scale_fill_brewer(palette="Dark2") +
geom_jitter(shape=16, position=position_jitter(0.9))+
labs(title = 'Point per game for all players in different positions',
y='Points per game',x='Positions')
#create the boxplots of points per game in each positions
#C=center, F=forward, F-C=forward&center, G=guard, PF= power forward, PG=point guard, SF= small forward
#SF-PF=small foward&power forward, SG= shooting guard
ggplot(data = scores_df, aes(x=Pos,y=PTS, fill=Pos)) +
geom_boxplot()+
scale_fill_brewer(palette="Dark2") +
geom_jitter(shape=1, position=position_jitter(0.2))+
labs(title = 'Point per game for all players in different positions',
y='Points per game',x='Positions')
#create the boxplots of points per game in each positions
#C=center, F=forward, F-C=forward&center, G=guard, PF= power forward, PG=point guard, SF= small forward
#SF-PF=small foward&power forward, SG= shooting guard
ggplot(data = scores_df, aes(x=Pos,y=PTS, fill=Pos)) +
geom_boxplot()+
scale_fill_brewer(palette="Dark2") +
geom_jitter(shape=16, position=position_jitter(0.2))+
labs(title = 'Point per game for all players in different positions',
y='Points per game',x='Positions')
source("~/Exploratory-Data-Analysis/warriors.r")
#Ranking the point per game for all warrior players
ggplot(data=warriors_df,aes(x=reorder(Player,PTS),y=PTS)) +
geom_bar(stat ='identity',aes(fill=PTS))+
coord_flip() +
theme_grey() +
scale_fill_gradient(name="Points Per Game for Warriors")+
labs(title = 'Ranking of Points per games for Warriors',
y='Points Per Game',x='Players')+
geom_hline(yintercept = mean(warriors_df$PTS),size = 1, color = 'orange')
source("~/Exploratory-Data-Analysis/agevspts.R")
stats_df <- read.csv("data.csv")
my_graph +
scale_x_continuous(breaks = seq(19, 37, by = 1)) +
scale_y_continuous(breaks = seq(0, 35, by = 5)) +
labs(
x = "Age",
y = "Points per game",
title = "Relationship between age and points per game",
)
source("~/Exploratory-Data-Analysis/Table.R")
top_ten <- player %>%
top_n(10, PTS)
new_top_table <- data.table (
Player = top_ten$Player,
"X2P" = top_ten$X2P,
"X3P" = top_ten$X3P,
"BLK" = top_ten$BLK,
"PTS" = top_ten$PTS
)
View(new_top_table)
new_top_table <- data.table (
Player = top_ten$Player,
"X2P" = top_ten$X2P,
"X3P" = top_ten$X3P,
"BLK" = top_ten$BLK,
"PTS" = top_ten$PTS
)
View(new_top_table)
View(new_top_table)
View(top_ten)
View(nbastats_df)
source("~/Exploratory-Data-Analysis/Summary_Information.R")
View(my_graph)
source("~/Exploratory-Data-Analysis/Summary_Information.R")
View(summary_info)
nbastats_df <- read.csv("data.csv")
#create the boxplots of points per game in each positions
#C=center, F=forward, F-C=forward&center, G=guard, PF= power forward, PG=point guard, SF= small forward
#SF-PF=small foward&power forward, SG= shooting guard
ggplot(data = scores_df, aes(x=Pos,y=PTS, fill=Pos)) +
geom_boxplot()+
scale_fill_brewer(palette="Dark2") +
geom_jitter(shape=16, position=position_jitter(0.2))+
labs(title = 'Point per game for all players in different positions',
y='Points per game',x='Positions')
nbastats_df <- read.csv("data.csv")
#filter out the data of point per game and positions
scores_df <- nbastats_df %>%
select(PTS, Pos)
#create the boxplots of points per game in each positions
#C=center, F=forward, F-C=forward&center, G=guard, PF= power forward, PG=point guard, SF= small forward
#SF-PF=small foward&power forward, SG= shooting guard
ggplot(data = scores_df, aes(x=Pos,y=PTS, fill=Pos)) +
geom_boxplot()+
scale_fill_brewer(palette="Dark2") +
geom_jitter(shape=16, position=position_jitter(0.2))+
labs(title = 'Point per game for all players in different positions',
y='Points per game',x='Positions')
}
source("~/Exploratory-Data-Analysis/warriors.r")
#Ranking the point per game for all warrior players
warriors_chart <- ggplot(data=warriors_df,aes(x=reorder(Player,PTS),y=PTS)) +
geom_bar(stat ='identity',aes(fill=PTS))+
coord_flip() +
theme_grey() +
scale_fill_gradient(name="Points Per Game for Warriors")+
labs(title = 'Ranking of Points per games for Warriors',
y='Points Per Game',x='Players')+
geom_hline(yintercept = mean(warriors_df$PTS),size = 1, color = 'orange')
plot(warriors_chart)
source("../source/warriors.r")
source("warriors.r")
plot(warriors.r)
source("warriors.r")
source("warriors.r")
source("warriors.r")
<sadasdasd>
source("Table.R")
source("warriors.r")
source("Table.R")
#source("warriors.r")
plot(new_top_table)
print(new_top_table)
source("~/Exploratory-Data-Analysis/agevspts.R")
my_graph +
scale_x_continuous(breaks = seq(19, 37, by = 1)) +
scale_y_continuous(breaks = seq(0, 35, by = 5)) +
labs(
x = "Age",
y = "Points per game",
title = "Relationship between age and points per game",
)
source("~/Exploratory-Data-Analysis/agevspts.R")
my_graph <- ggplot(age_points_df, aes(x=Age, y=PTS)) +
geom_point() +
scale_x_continuous(breaks = seq(19, 37, by = 1)) +
scale_y_continuous(breaks = seq(0, 35, by = 5)) +
labs(
x = "Age",
y = "Points per game",
title = "Relationship between age and points per game",
)
source("~/Exploratory-Data-Analysis/agevspts.R")
my_graph <- ggplot(age_points_df, aes(x=Age, y=PTS)) +
geom_point() +
scale_x_continuous(breaks = seq(19, 37, by = 1)) +
scale_y_continuous(breaks = seq(0, 35, by = 5)) +
labs(
x = "Age",
y = "Points per game",
title = "Relationship between age and points per game",
)
source("~/Exploratory-Data-Analysis/agevspts.R")
my_graph <- ggplot(age_points_df, aes(x=Age, y=PTS)) +
geom_point()
my_graph +
scale_x_continuous(breaks = seq(19, 37, by = 1)) +
scale_y_continuous(breaks = seq(0, 35, by = 5)) +
labs(
x = "Age",
y = "Points per game",
title = "Relationship between age and points per game",
)
source("~/Exploratory-Data-Analysis/agevspts.R")
source("~/Exploratory-Data-Analysis/agevspts.R")
source("~/Exploratory-Data-Analysis/agevspts.R")
source("~/Exploratory-Data-Analysis/positions.r")
source("~/Exploratory-Data-Analysis/positions.r")
source("Table.R")
source("warriors.r")
source("agevspts.R")
source("positions.r")
source("Table.R")
source("warriors.r")
source("agevspts.R")
#source("positions.r")
#source("Table.R")
#source("warriors.r")
#source("agevspts.R")
source("positions.r")
source("~/Exploratory-Data-Analysis/positions.r")
source("~/Exploratory-Data-Analysis/positions.r")
source("~/Exploratory-Data-Analysis/positions.r")
source("~/Exploratory-Data-Analysis/positions.r")
source("~/Exploratory-Data-Analysis/positions.r")
source("~/Exploratory-Data-Analysis/positions.r")
source("~/Exploratory-Data-Analysis/positions.r")
source("~/Exploratory-Data-Analysis/positions.r")
source("~/Exploratory-Data-Analysis/positions.r")
source("~/Exploratory-Data-Analysis/positions.r")
source("Table.R")
source("warriors.r")
source("agevspts.R")
source("positions.r")
source("Table.R")
source("warriors.r")
source("agevspts.R")
source("positions.r")
source("agevspts.R")
source("positions.r")
source("warriors.r")
source("Table.R")
source("Summary_Information.R")
source("Summary_Information.R")
source("Summary_Information.R")
source("Table.R")
source("Table.R")
source("Table.R")
source("Table.R")
top_ten <- player %>%
group_by(10, PTS)
source("~/Exploratory-Data-Analysis/Table.R")
library("dplyr")
player <- read.csv("data.csv")
top_ten <- player %>%
top_n(10, PTS)
View(top_ten)
View(player)
View(top_ten)
top_ten <- group_by(PTS)
top_ten <- group_by(player$PTS)
top_ten <- player %>% group_by(PTS)
View(top_ten)
library("dplyr")
player <- read.csv("data.csv")
top_ten <- player %>% group_by(PTS)
View(player)
View(top_ten)
top_ten <- player %>% group_by(PTS, Age)
View(top_ten)
View(player)
View(top_ten)
top_ten <- player %>%
top_n(10, PTS)
View(top_ten)
source("Table.R")
source("~/Exploratory-Data-Analysis/Table.R")
source("~/Exploratory-Data-Analysis/Table.R")
source("~/Exploratory-Data-Analysis/Table.R")
top_ten <- top_ten[20, ;]
top_ten <- top_ten[20, ]
library("dplyr")
player <- read.csv("data.csv")
top_ten <- player %>%
top_n(20, PTS)
top_ten <- top_ten[20, ]
player <- read.csv("data.csv")
top_ten <- player %>%
top_n(20, PTS)
top_ten <- top_ten[, 20]
top_ten <- top_ten[:, 20]
top_ten <- player %>%
top_n(20, PTS)
top_ten <- top_ten[20, ]
View(top_ten)
top_ten <- player %>%
top_n(20, PTS)
top_ten <- top_ten[c(1,20), ]
View(top_ten)
top_ten <- player %>%
top_n(20, PTS)
top_ten <- top_ten[c(1:20), ]
View(top_ten)
source("Table.R")
top_ten <- player %>%
sort(top_n(20, PTS))
top_ten <- player %>%
top_n(20, PTS)
player <- read.csv("data.csv")
top_ten <- player %>%
top_n(20, PTS)
top_ten <- top_ten[c(1:20), ]
top_ten <- arrange(top_ten, PTS)
View(top_ten)
top_ten <- arrange(top_ten, -PTS)
View(top_ten)
source("Table.R")
View(player)
